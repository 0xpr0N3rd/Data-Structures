// ConsoleApplication2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>

using namespace std;

struct node
{
	int data;
	node *next;
};

//LinkedList içinde araya ekleme ve sıralı ekleyen fonksiyon	
//ekleme yapmak için iki node arasında solda olanın ucuna ekleme yapmak zorundayız, çünkü sağ taraftakine eklersek bir daha geriye dönemeyiz

void print(node *node) //method for printing nodes
{
	while (node != NULL)
	{
		cout << node->data << endl;
		node = node->next;
	}
}

void add(node *r, int x) //method for adding new nodes
{
	while (r->next != NULL) { r = r->next; } //r = r-> next (preventing r to stuck showing same node, it is pointing to next node each time)
	r->next = (node *)malloc(sizeof(node)); //add new node to next of r
	r->next->data = x;
	r->next->next = NULL;
}

int main()
{
	node *head = new node;
	head = (node *)malloc(sizeof(node)); //allocated a memory space for head node
	head->data = 500;
	head->next = NULL;

	node *cursor = new node; //*******
	cursor = (node *)malloc(sizeof(node)); //allocated a memory space for cursor node

	for (int i = 0; i < 5; i++)
		add(head, i * 10); //creating new nodes

	print(head); //print created nodes

	cursor = head;
	for (int i = 0; i < 3; i++)
		cursor = cursor->next; //araya node eklenmesini istenen nodu bul (3 random - 20 ile 30 arasına eklemek istiyoruz)

	node *temp = new node;
	temp = (node *)malloc(sizeof(node)); //araya eklenecek nodeu tutmak için oluşturduk
	temp->next = cursor->next;	//nodeu araya eklemek için cursorın tuttuğu bir sonraki nodeun pointerını tempte tutulan yeni nodeun nextine bağladık
	cursor->next = temp;   		//öncelikle yeni oluşturulan node araya girdiği için tempin nextiyle listin geri kalanını bağlamamız lazım, daha sonra cursor'ın
								//next'inden bu yeni nodea bağlantı kurulması lazım
	temp->data = 100; //try
	cout << endl; 
	print(head); //**************


	return 0;
}
